package conn;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

public class VulnerabilityTester {

    public static String loginURL;
    public static HttpURLConnection con;
    public  static ArrayList<String> vulnerabilityList;

    public VulnerabilityTester(String url) {

        this.loginURL = url;

        try {
            URL obj = new URL(url);
            con = (HttpURLConnection) obj.openConnection();

            vulnerabilityList = new ArrayList<String>();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
     public static ArrayList<String> checkVulnerability(String url){
        
        VulnerabilityTester vt = new VulnerabilityTester(url);

        vt.isClickJackingSecure();
        vt.isMissingSecurityHeaders();
        vt.isHTTPOnlyUsed();
        vt.isInsecureHTTPMethodsUsed();
        vt.isSQLInjectionVulnerable();
        vt.isXSSVulnerable();
        vt.isBrokenAuth();

        if (url.startsWith("https")) {
            vt.isSecureFlagSet();
            vt.isWeakCipherUsed();
        }

/*        for (String vulnerability : vulnerabilityList) {
            System.out.println(vulnerability);
        }
*/
     return vt.vulnerabilityList;
     } 

    public static void main(String args[]) {

        String url = "http://127.0.0.1:8080/insecure/public/Login.jsp";
        checkVulnerability(url);
    }

    public void isClickJackingSecure() {

        String clickJackHeader = con.getHeaderField("X-FRAME-OPTIONS");

        if (clickJackHeader == null) 
            vulnerabilityList.add("ClickJacking");
       
    }

    public void isWeakCipherUsed() {

        try {
            CheckWeakSSLCipher cwc = new CheckWeakSSLCipher();
            boolean isWeakCipherUsed = cwc.isWeakSSLCipherUsed(loginURL);

            if (isWeakCipherUsed) {
                vulnerabilityList.add("WeakCipher");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void isMissingSecurityHeaders() {
        try {
            String strictTSH = con.getHeaderField("Strict-Transport-Security");

            if (strictTSH == null) 
                 vulnerabilityList.add("MissingSecurityHeader");
           
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void isHTTPOnlyUsed() {

        String cookie = con.getHeaderField("Set-Cookie");

        System.out.println(cookie);
        if (cookie != null && cookie.contains("HttpOnly")) {
            vulnerabilityList.add("HTTPOnly");
        }

    }

    public void isSecureFlagSet() {

        String cookie = con.getHeaderField("Set-Cookie");

        System.out.println(cookie);
        if (cookie != null && cookie.contains("secure")) {
            vulnerabilityList.add("SecureFLag");
        }

    }

    public void isInsecureHTTPMethodsUsed() {

        InsecureHTTPMethodTest ihtm = new InsecureHTTPMethodTest();
        try {
            boolean isInsecureMethod = ihtm.testInsecure(loginURL);
            if (isInsecureMethod) {
                vulnerabilityList.add("InsecureHttpMethod");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void isSQLInjectionVulnerable() {
        SQLInjectionTest sqi = new SQLInjectionTest();
        try {
            boolean sqlInject = sqi.checkSQLInjection(loginURL);

            if (sqlInject) {
                vulnerabilityList.add("SQLInjection");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    public void isXSSVulnerable(){
         
         XSSVulnerabilityTest  xss = new XSSVulnerabilityTest();
         
         boolean isXSSVulnerable = xss.testXSS(loginURL);
         
         if (isXSSVulnerable) {
                vulnerabilityList.add("XSSVulnerable");
            }
    
    }
    
      public void isBrokenAuth() {
          
        BrokenAuth brokenAuth = new BrokenAuth();
        try {
            boolean brokenAuthBool = brokenAuth.checkBrokenAuth(loginURL);

            if (brokenAuthBool) {
                vulnerabilityList.add("BrokenAuthentication");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
}
