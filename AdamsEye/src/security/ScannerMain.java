

package security;

import conn.HttpURLConnectionExample;
import conn.LoginUtil;
import conn.NewClass;
import conn.NewOkCancelDialog;
import conn.PDFGenerator;
import conn.VulnerabilityTester;
import java.io.DataOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.awt.*;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import upload.*;
import static java.nio.file.StandardCopyOption.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
//import sun.java2d.cmm.ProfileDeferralInfo;



public class ScannerMain extends javax.swing.JFrame {
    HashMap<String, HashSet<String>> map = new HashMap<String, HashSet<String>>();
    public static String currentDir, reportsDirectory;

    /**
     * Creates new form NewJFrame
     */
    public ScannerMain() {
        initComponents();
    }
    HashMap<String, ArrayList<String> > allVulnerabilityList = new HashMap<String, ArrayList<String> >();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jPanel2 = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        scanBtn = new javax.swing.JButton();
        urlTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        scanningProgressBar = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        vulnerabilityDataPane = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        vulnerabilityJList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        BruteForceUtil = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        DirectoryListingUtil = new javax.swing.JMenu();
        RequestEditorUtil = new javax.swing.JMenu();
        FileUploaderUtil = new javax.swing.JMenu();
        PacketAnalyzerUtil = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        jMenuItem6.setText("jMenuItem6");

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        jMenu7.setText("jMenu7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scanner Main");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saveBtn.setText("SAVE");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("RESET");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        exitBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exitBtn.setText("EXIT");
        exitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitBtnMouseClicked(evt);
            }
        });
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection Details"));

        scanBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        scanBtn.setText("Scan");
        scanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanBtnActionPerformed(evt);
            }
        });

        urlTF.setToolTipText("Please enter the URL to be scanned");
        urlTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTFActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("URL");

        scanningProgressBar.setBackground(new java.awt.Color(204, 204, 255));
        scanningProgressBar.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        scanningProgressBar.setForeground(new java.awt.Color(51, 51, 255));
        scanningProgressBar.setToolTipText("% Done");
        scanningProgressBar.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(204, 204, 204)));
        scanningProgressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        scanningProgressBar.setOpaque(true);
        scanningProgressBar.setStringPainted(true);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Progress");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scanningProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(scanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(urlTF, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(urlTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scanningProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(6, 6, 6))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Vulnerabilities Details"));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 550));

        vulnerabilityDataPane.setEditable(false);
        jScrollPane2.setViewportView(vulnerabilityDataPane);

        vulnerabilityJList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vulnerabilityJListFocusGained(evt);
            }
        });
        vulnerabilityJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vulnerabilityJListMouseClicked(evt);
            }
        });
        vulnerabilityJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vulnerabilityJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(vulnerabilityJList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Vulnerability List");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Description of the selected vulnerability");

        jScrollPane3.setViewportView(jList1);

        jLabel4.setText("Affected URL's");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(114, 114, 114))
        );

        BruteForceUtil.setText("Brute Force");
        BruteForceUtil.setFocusable(false);
        BruteForceUtil.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BruteForceUtil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BruteForceUtilMouseClicked(evt);
            }
        });
        BruteForceUtil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BruteForceUtilActionPerformed(evt);
            }
        });
        jMenuBar1.add(BruteForceUtil);
        jMenuBar1.add(jMenu1);

        DirectoryListingUtil.setText("Directory Listing");
        DirectoryListingUtil.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DirectoryListingUtil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DirectoryListingUtilMouseClicked(evt);
            }
        });
        DirectoryListingUtil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectoryListingUtilActionPerformed(evt);
            }
        });
        jMenuBar1.add(DirectoryListingUtil);

        RequestEditorUtil.setText("Request Editor");
        RequestEditorUtil.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        RequestEditorUtil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RequestEditorUtilMouseClicked(evt);
            }
        });
        RequestEditorUtil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestEditorUtilActionPerformed(evt);
            }
        });
        jMenuBar1.add(RequestEditorUtil);

        FileUploaderUtil.setText("File Uploader");
        FileUploaderUtil.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        FileUploaderUtil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FileUploaderUtilMouseClicked(evt);
            }
        });
        FileUploaderUtil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileUploaderUtilActionPerformed(evt);
            }
        });
        jMenuBar1.add(FileUploaderUtil);

        PacketAnalyzerUtil.setText("Packet Analyzer");
        PacketAnalyzerUtil.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        PacketAnalyzerUtil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PacketAnalyzerUtilMouseClicked(evt);
            }
        });
        PacketAnalyzerUtil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PacketAnalyzerUtilActionPerformed(evt);
            }
        });
        jMenuBar1.add(PacketAnalyzerUtil);
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public String getPropValues() throws IOException {
 
		String result = "";
		Properties prop = new Properties();
		String propFileName = "VulnerabilitiesList.properties";
 
		InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);
		prop.load(inputStream);
		if (inputStream == null) {
			throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
		}
 
		Date time = new Date(System.currentTimeMillis());
 
		// get the property value and print it out
		String user = prop.getProperty("user");
		String company1 = prop.getProperty("company1");
		String company2 = prop.getProperty("company2");
		String company3 = prop.getProperty("company3");
 
		result = "Company List = " + company1 + ", " + company2 + ", " + company3;
		System.out.println(result + "\nProgram Ran on " + time + " by user=" + user);
		return result;
	}
    
     
    private void scanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanBtnActionPerformed
       // System.setProperty("javax.net.ssl.trustStore","C:\\JAVA\\trust.jks");
      ArrayList<String> params = null;
      ArrayList<String> paramsValues = null;
      NewClass nc;
      System.out.println("Inside scanBtn : URL"+urlTF.getText());
        if(urlTF.getText().startsWith("http://") || urlTF.getText().startsWith("https://") || urlTF.getText().startsWith("www.") )
        {
            try {
                System.out.println("url is "+urlTF.getText());
                LoginUtil lu = new LoginUtil();
                String inputUrl = urlTF.getText();
                String redirect = lu.isRedirect(inputUrl);
                params = lu.getFormParameters(inputUrl);
                if(redirect!=null){
                    nc = new NewClass(inputUrl,redirect,params.size(), params, true);
                }
                else{
                    nc = new NewClass(inputUrl,null,params.size(), params, false);
                    redirect = inputUrl;
                }
                if(redirect!=null && params!=null){
                    paramsValues = nc.display();
                }
                if(paramsValues==null){
                    System.out.println("CANCELLED!!");
                    return ;
                }
                    
                HashSet<String> alLUrls = lu.getAllUrls(redirect, params, paramsValues);
                System.out.println("GOT ALL THE URL LISTS");
                System.out.println(alLUrls.size());
                int count=1, totalNoOfUrls = alLUrls.size();
                for(String url : alLUrls){
                    
                    updateProgressBar(count, totalNoOfUrls);
                    
                    System.out.println(count+": Checking vulnerability for url "+url);
                    allVulnerabilityList.put(url, VulnerabilityTester.checkVulnerability(url));
                    System.out.println(count+": Done for url "+url+"\nAnd total number of vernerability is "+allVulnerabilityList.get(url).size());
                    count++;
                }
               map = new HashMap<String, HashSet<String>>();
               for (String url : allVulnerabilityList.keySet()) {
                    for(String vulnerability : allVulnerabilityList.get(url)){
                        HashSet<String> temp = map.get(vulnerability);
                        if(temp==null) temp = new HashSet<String>();
                        temp.add(url);
                        map.put(vulnerability, temp);
                    }
                }
                System.out.println("Vulnerability and their urls");
                for(String s : map.keySet()){
                    System.out.println(s);
                    for(String u : map.get(s)){
                        System.out.println("            "+ u);
                    }
                }
                
                DefaultListModel listModel = new DefaultListModel();
                for (String vulnerability : map.keySet()) {
                    listModel.addElement(vulnerability);
                }
                
                vulnerabilityJList.setModel(listModel);
                //populateVulnerabilityData(allVulnerabilityList.get("http://localhost:8080/insecure/public/Login.jsp").toString());
            } catch (Exception ex) {
                Logger.getLogger(ScannerMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        else
        {
          JOptionPane.showMessageDialog(this, "Enter a proper URL ex: http://google.com","Invalid URL",0);
            
          /*  
            int option1 = JOptionPane.showOptionDialog( 
                    this,  
                    "Enter a proper URL ex: http://google.com",  
                    "Invalid URL", JOptionPane.YES_NO_OPTION,  
                    JOptionPane.WARNING_MESSAGE, null, null,  
                    null );  
            if( option == JOptionPane.YES_OPTION ) { 
            //  this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
               
            }*/  
        }
        
       
         
         
         
    }//GEN-LAST:event_scanBtnActionPerformed
   
    private void vulnerabilityJListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vulnerabilityJListFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_vulnerabilityJListFocusGained

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
    
        int option = JOptionPane.showOptionDialog( 
                    this,  
                    "Are you sure you want to exit?",  
                    "Exit Dialog", JOptionPane.YES_NO_OPTION,  
                    JOptionPane.WARNING_MESSAGE, null, null,  
                    null );  
            if( option == JOptionPane.YES_OPTION ) { 
            //  this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
               System.exit( 0 );  
            }  
        
 
   // TODO add your handling code here:
    }//GEN-LAST:event_exitBtnActionPerformed

    private void exitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitBtnMouseClicked
        // TODO add your handling code here:
      /*  
        int option = JOptionPane.showOptionDialog( 
                    this,  
                    "Are you sure you want to exit?",  
                    "Exit Dialog", JOptionPane.YES_NO_OPTION,  
                    JOptionPane.WARNING_MESSAGE, null, null,  
                    null );  
            if( option == JOptionPane.YES_OPTION ) {  
                System.exit( 0 );  
            }  
        
      */     
        
    }//GEN-LAST:event_exitBtnMouseClicked

    private void vulnerabilityJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vulnerabilityJListMouseClicked

      
        
// TODO add your handling code here:
    }//GEN-LAST:event_vulnerabilityJListMouseClicked

    private void vulnerabilityJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vulnerabilityJListValueChanged

        System.out.println(" Inside JList property changes");
        boolean adjust = evt.getValueIsAdjusting();
        if (!adjust) {
          JList list = (JList) evt.getSource();
          int selections[] = list.getSelectedIndices();
          Object selectionValues[] = list.getSelectedValues();
          for (int i = 0, n = selections.length; i < n; i++) {
         /*   if (i == 0) {
              System.out.println(" Selections: ");
            }*/
              
         System.out.println(selections[i] + " : " + selectionValues[i] + "\n");
         
         populateVulnerabilityData((String) selectionValues[i]);
              System.out.println(map.get((String) selectionValues[i]).size());
         populateAffectedURLs(map.get((String) selectionValues[i]));
         
        
          }
      
          }
// TODO add your handling code here:
    }//GEN-LAST:event_vulnerabilityJListValueChanged

public void populateVulnerabilityData(String vulnerabilityName)
{
    
    try{
        
    String currentDir = System.getProperty("user.dir");
    System.out.println("Directory:::"+currentDir);
    
    System.out.println("The vulnerability1:::"+vulnerabilityName);
    URL pageURL = getClass().getResource(vulnerabilityName+".html");
    
    URL url = security.ScannerMain.class.getProtectionDomain().getCodeSource().getLocation();
    
    System.out.println("The URL");
        System.out.println("URL is::"+pageURL);
    vulnerabilityDataPane.setText(null);
    vulnerabilityDataPane.setEditable(false);
    //vulnerabilityDataPane.setPage("./"+vulnerabilityName+".html");
    
    vulnerabilityDataPane.setContentType("text/html");
    vulnerabilityDataPane.setPage(new URL("http://adamzeye.com/html/"+vulnerabilityName+".html"));
    
    
    
    }
    
    catch(Exception Ex)
    {
        Ex.printStackTrace();
    }
    /*
    
    StringBuffer strBfr=new StringBuffer();
    
    try{
        FileInputStream fstream = new FileInputStream("./"+vulnerabilityName+".html");
        
        DataInputStream in = new DataInputStream(fstream);
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        String strLine;
        while ((strLine = br.readLine()) != null)   {
                System.out.println(strLine); //to print on consolle
                strBfr.append(strLine);
            }
    
        
        
            in.close(); 
         }
    catch(Exception ex)
    {
        ex.printStackTrace();
    }
    
*/
}
    
    
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    
   
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void urlTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTFActionPerformed

            urlTF.setText("");
// TODO add your handling code here:
    }//GEN-LAST:event_urlTFActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        urlTF.setText("");
        vulnerabilityDataPane.setText(null);
        updateProgressBar(0, 1);
        DefaultListModel listModel = (DefaultListModel) vulnerabilityJList.getModel();
        listModel.removeAllElements();
        //jList1.removeAll();
        DefaultListModel listMode2 = (DefaultListModel) jList1.getModel();
        listMode2.removeAllElements();
        
             
    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
    StringBuffer strSave= new StringBuffer();
    FileOutputStream fos = null;
    FileWriter fileWriter=null;
    JFileChooser jFileChooser=null;
    File fileToSave=null;

    //strSave.append(vulnerabilityDataPane.getText());
    
     currentDir= System.getProperty("user.dir");
    
    jFileChooser = new JFileChooser();
    //FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF", "pdf", "pdf");
    //jFileChooser.setFileFilter(filter);
      jFileChooser.setAcceptAllFileFilterUsed(false);
    jFileChooser.addChoosableFileFilter(new FileNameExtensionFilter(".pdf", "pdf")); 
  
     int userSelection = jFileChooser.showSaveDialog(null);
 
     if (userSelection == JFileChooser.APPROVE_OPTION) {
     fileToSave = jFileChooser.getSelectedFile();
     System.out.println("Save as file: " + fileToSave.getAbsolutePath());
     }
     
     int lastIndex = fileToSave.getAbsolutePath().lastIndexOf('\\');
     System.out.println("The lastIndex is :::"+lastIndex);
     
     //System.out.println(fileToSave.getAbsolutePath().lastIndexOf( "'\'" ));
     reportsDirectory=fileToSave.getAbsolutePath().substring(0, lastIndex);
     
     System.out.println("Calling Generate Report::::");
     
       PDFGenerator pdfg = new PDFGenerator();
        pdfg.generateReport(currentDir, fileToSave.getAbsolutePath(), map);
   
        
        
        
    }//GEN-LAST:event_saveBtnActionPerformed

    private void RequestEditorUtilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestEditorUtilActionPerformed

   //  RequestEditor requestEditor =new RequestEditor();
   //     requestEditor.setVisible(true);        
// TODO add your handling code here:
    }//GEN-LAST:event_RequestEditorUtilActionPerformed

    private void FileUploaderUtilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileUploaderUtilActionPerformed

        new upload.SwingFileUploadHTTP().setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_FileUploaderUtilActionPerformed

    private void DirectoryListingUtilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectoryListingUtilActionPerformed

    new DirectoryListing().setVisible(true);        
// TODO add your handling code here:
    }//GEN-LAST:event_DirectoryListingUtilActionPerformed

    private void RequestEditorUtilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RequestEditorUtilMouseClicked
        
         RequestEditor requestEditor =new RequestEditor();
        requestEditor.setVisible(true); 
// TODO add your handling code here:
    }//GEN-LAST:event_RequestEditorUtilMouseClicked

    private void DirectoryListingUtilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DirectoryListingUtilMouseClicked
        // TODO add your handling code here:
        
        new DirectoryListing().setVisible(true);    
    }//GEN-LAST:event_DirectoryListingUtilMouseClicked

    private void FileUploaderUtilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FileUploaderUtilMouseClicked
        // TODO add your handling code here:
        new upload.SwingFileUploadHTTP().setVisible(true);
    }//GEN-LAST:event_FileUploaderUtilMouseClicked

    private void BruteForceUtilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BruteForceUtilActionPerformed

        BruteForce bruteForce =new BruteForce();
        bruteForce.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_BruteForceUtilActionPerformed

    private void BruteForceUtilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BruteForceUtilMouseClicked
        // TODO add your handling code here:

        BruteForce bruteForce =new BruteForce();
        bruteForce.setVisible(true);
    }//GEN-LAST:event_BruteForceUtilMouseClicked

    private void PacketAnalyzerUtilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PacketAnalyzerUtilActionPerformed
        // TODO add your handling code here:
        PacketSniffer packetSniffer = new PacketSniffer();
        packetSniffer.setVisible(true);
    }//GEN-LAST:event_PacketAnalyzerUtilActionPerformed

    private void PacketAnalyzerUtilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PacketAnalyzerUtilMouseClicked
        // TODO add your handling code here:
        
        PacketSniffer packetSniffer = new PacketSniffer();
        packetSniffer.setVisible(true);
    }//GEN-LAST:event_PacketAnalyzerUtilMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScannerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScannerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScannerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScannerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScannerMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BruteForceUtil;
    private javax.swing.JMenu DirectoryListingUtil;
    private javax.swing.JMenu FileUploaderUtil;
    private javax.swing.JMenu PacketAnalyzerUtil;
    private javax.swing.JMenu RequestEditorUtil;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton scanBtn;
    private javax.swing.JProgressBar scanningProgressBar;
    private javax.swing.JTextField urlTF;
    private javax.swing.JEditorPane vulnerabilityDataPane;
    private javax.swing.JList vulnerabilityJList;
    // End of variables declaration//GEN-END:variables

    private void populateAffectedURLs(HashSet<String> urls) {
        DefaultListModel listModel = new DefaultListModel();
                for (String url : urls) {
                    listModel.addElement(url);
                }
                
                jList1.setModel(listModel);
    }

    private void updateProgressBar(int count, int totalNoOfUrls) {
        Rectangle progressRect = scanningProgressBar.getBounds();
        progressRect.x = 0;
        progressRect.y = 0;
        int effectiveValue = (int)((count*scanningProgressBar.getMaximum()) / totalNoOfUrls + 0.5);
        System.out.println("effective value is "+effectiveValue);
        scanningProgressBar.setValue( effectiveValue );
        scanningProgressBar.paintImmediately( progressRect );
        
    }
}
